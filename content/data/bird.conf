#
# BIRD 2 configuration for ASxxxxx <AS-Set> - <at_some_location>
#
# All IPv4 related options are commented out, but left in in order easely allow enabling if needed
# This config only honors gracefull shutdown, but could be extended with 
# BGP communities as described in: https://arouteserver.readthedocs.io/en/latest/CONFIG.html?highlight=communities#bgp-communities
#
#
# Update config with
#   birdc and "configure soft"
#   Or 'birdcl configure'
#   Check config in birdc with
#      configure check "/etc/bird/bird.conf"
#
# See established peering connections with 'show protocols' in birdc

log syslog all;
#debug protocols all;
debug protocols { events, states };

watchdog warning 5 s;
watchdog timeout 30 s;

timeformat base     iso long;
timeformat log      iso long;
timeformat protocol iso long;
timeformat route    iso long;

# Global unique ID, ex. your public unicast IPv4 address
router id <your_IPv4_address>;

# functions and filters

define local_asn   = <your_ASN>;
define labitat_asn = 205235;
define labix_asn   = 60247;

# LabIX Peering LAN
# -------------------------
define local_labix_ipv6 = <peering_lan_address>;
define local_labix_ipv4 = <peering_lan_address>;

# Route Server addresses
define labix_rs0_ipv6 = 2001:7f8:149:1ab::6:0247:1;
define labix_rs0_ipv4 = 185.0.29.1;

# Define your prexies
# -------------------------
# You can also do '<your_v6_prefix>/44{44,48}'
# This allows for announcing any size between 44 and 48
define local_prefixes_v6 = [
	<your_v6_prefix>/48,
	<your_v6_prefix>/44
];

define local_prefixes_more_specific_v6 = [
	<your_v6_prefix>/48{49,128},
	<your_v6_prefix>/44{45,128}
];

#define some_peer_prefixes_v6 = [
#	<peer_v6_prefix>/48,
#	<peer_v6_prefix>/48
#];

# functions and filters

function is_default_route() {
	case net.type {
		#NET_IP4: if net = 0.0.0.0/0 then return true;
		NET_IP6: if net = ::/0 then return true;
	}
	return false;
}

function is_customer_route() {
	case net.type {
		#NET_IP4: if net ~ local_prefixes_v4 then return true;
		NET_IP6: if net ~ local_prefixes_v6 then return true;
	}
	return false;
}

# define basic protocols
protocol device {}

protocol direct {
#	ipv4;
	ipv6;
}

# -------------------------------
# Export to kernel network driver
filter kernel_export {
	if source !~ [ RTS_BGP, RTS_STATIC ] then reject;
	if is_default_route() then accept;
	if is_customer_route() then accept;
	reject;
}

function honor_graceful_shutdown()
{
	# RFC 8326 Graceful BGP Session Shutdown
	if (65535, 0) ~ bgp_community then {
		bgp_local_pref = 0;
	}
}

# Transit filters
filter transit_import {
	honor_graceful_shutdown();
	accept;
}

filter transit_export {
	if !is_customer_route() then reject;
	accept;
}

# generate local routes
#protocol static static4 {
#	ipv4;
#	route <your_v4_prefix>/24 unreachable;
#	route <your_v4_prefix>/24 unreachable;
#}

protocol static static6 {
	ipv6;
	route <your_v6_prefix>/48 unreachable;
	route <your_v6_prefix>/44 unreachable;
}

# ---------------------
# Export to your kernel
#protocol kernel kernel4 {
#	ipv4 {
#		import all;
#		export filter kernel_export;
#	};
#	learn;
#	persist;
#	graceful restart;
#	merge paths;
#}

protocol kernel kernel6 {
	ipv6 {
		import all;
		export filter kernel_export;
	};
	learn;
	persist;
	graceful restart;
	merge paths;
}

# -------
# Transit
#protocol bgp labitat_ipv4 {
#	local <your_local_v4_address> as local_asn;
#	neighbor <peer_v4_address> as labitat_asn;
#	passive;
#	ipv4 {
#		import limit 10 action block;
#		receive limit 20 action disable;
#		import keep filtered on;
#		import filter transit_import;
#		export filter transit_export;
#	};
#}

# Transit - Labitat
protocol bgp labitat_ipv6 {
	local <your_local_v6_address> as local_asn;
	neighbor <transit_v6_address> as labitat_asn;
	passive;
	ipv6 {
		import limit off;
		receive limit off;
		import keep filtered on;
		import filter transit_import;
		export filter transit_export;
	};
}

# LabIX Route Server
# -------------------------------------------------
# Non-passive connection, the RS awaits for your routers connection
protocol bgp labix_ipv6 {
        local local_labix_ipv6 as local_asn;
        neighbor labix_rs0_ipv6 as labix_asn;
        ipv6 {
                import limit off;
                receive limit off;
                import keep filtered on;
                import filter transit_import;
                export filter transit_export;
        };
}


# Peering
# ---------------------
template bgp bgp_peer {
	default bgp_local_pref 120;
}

# customer import
function peer_import(int peer_asn; prefix set peer_prefixes) {
	if net !~ peer_prefixes then reject;
	if bgp_path.first != peer_asn then reject;
	accept;
}

#protocol bgp <some_peer_v6> from bgp_peer {
#	local <your_local_v6_address> as local_asn;
#	neighbor <peer_local_v6_address> as <some_peer_asn>;
#	ttl security;
#	ipv6 {
#		import limit 10 action block;
#		receive limit 20 action disable;
#		import keep filtered on;
#		import filter { peer_import(<some_peer_asn>, <some_peer_prefixes_v6>); };
#		export filter transit_export;
#	};
#}
